cytosee_go()
library(plotly)
df=cyto@fcs.data
library(cytosee)
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(devtools)
document()
document()
library(devtools)
document()
getLoadedDLLs()
document()
devtools::document()
getLoadedDLLs()
devtools::document()
devtools::document()
getLoadedDLLs()
remove.packages("destiny")
getLoadedDLLs()
getLoadedDLLs()
length(getLoadedDLLs())
devtools::document()
library(cytosee)
cytosee_go()
getLoadedDLLs()
length(getLoadedDLLs())
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
p <- plot_ly(
x = c("a", "b", "c"), y = c("d", "e", "f"),
z = m, type = "heatmap"
)
library(plotly  )
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
p <- plot_ly(
x = c("a", "b", "c"), y = c("d", "e", "f"),
z = m, type = "heatmap"
)
p
cytosee_go()
cytosee_go()
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
cytosee_go()
devtools::document()
cytosee_go()
library(cytosee)
cytosee_go()
MST=cyto@mst
PlotPies(MST,as.matrix(cyto@label),
main = "Cluster pie MST Plot",
colorPalette = grDevices::colorRampPalette(c("#8DD3C7",
"#FFFFB3",
"#BEBADA",
"#FB8072",
"#80B1D3",
"#FDB462",
"#B3DE69",
"#FCCDE5",
"#D9D9D9",
"#BC80BD",
"#CCEBC5",
"#FFED6F")))
library(FlowSOM)
MST=cyto@mst
PlotPies(MST,as.matrix(cyto@label),
main = "Cluster pie MST Plot",
colorPalette = grDevices::colorRampPalette(c("#8DD3C7",
"#FFFFB3",
"#BEBADA",
"#FB8072",
"#80B1D3",
"#FDB462",
"#B3DE69",
"#FCCDE5",
"#D9D9D9",
"#BC80BD",
"#CCEBC5",
"#FFED6F")))
output$MST_marker<-renderPlot({
MST=cyto@mst
PlotMarker(MST,marker = input$MST_markers,view = "MST",
main="Marker MST Plot",
colorPalette = grDevices::colorRampPalette(c("#dbdcd7",
"#dddcd7",
"#e2c9cc",
"#e7627d",
"#b8235a",
"#801357",
"#3d1635",
"#1c1a27")))
})
MST=cyto@mst
PlotMarker(MST,marker = input$MST_markers,view = "MST",
main="Marker MST Plot",
colorPalette = grDevices::colorRampPalette(c("#dbdcd7",
"#dddcd7",
"#e2c9cc",
"#e7627d",
"#b8235a",
"#801357",
"#3d1635",
"#1c1a27")))
MST=cyto@mst
PlotPies(fsom = MST,cellTypes = as.matrix(cyto@label),
main = "Cluster pie MST Plot",
colorPalette = grDevices::colorRampPalette(c("#8DD3C7",
"#FFFFB3",
"#BEBADA",
"#FB8072",
"#80B1D3",
"#FDB462",
"#B3DE69",
"#FCCDE5",
"#D9D9D9",
"#BC80BD",
"#CCEBC5",
"#FFED6F")))
PlotPies(fsom = MST,cellTypes = as.matrix(cyto@label),view = "MST",
main = "Cluster pie MST Plot",
colorPalette = grDevices::colorRampPalette(c("#8DD3C7",
"#FFFFB3",
"#BEBADA",
"#FB8072",
"#80B1D3",
"#FDB462",
"#B3DE69",
"#FCCDE5",
"#D9D9D9",
"#BC80BD",
"#CCEBC5",
"#FFED6F")))
PlotPies(fsom = MST,cellTypes = as.matrix(cyto@label),view = "MST",
main = "Cluster pie MST Plot",
colorPalette = grDevices::colorRampPalette(c("#8DD3C7",
"#FFFFB3",
"#BEBADA",
"#FB8072",
"#80B1D3",
"#FDB462",
"#B3DE69",
"#FCCDE5",
"#D9D9D9",
"#BC80BD",
"#CCEBC5",
"#FFED6F")))
PlotPies(fsom = MST,cellTypes = as.matrix(cyto@label))
# Read from file, build self-organizing map and minimal spanning tree
fileName <- system.file("extdata","lymphocytes.fcs",package="FlowSOM")
flowSOM_res <- FlowSOM(fileName, compensate=TRUE,transform=TRUE,
scale=TRUE,colsToUse=c(9,12,14:18),nClus=7)
ff <- flowCore::read.FCS(fileName)
ff_c <- flowCore::compensate(ff,flowCore::description(ff)$SPILL)
flowCore::colnames(ff_c)[8:18] <- paste("Comp-",
flowCore::colnames(ff_c)[8:18],
sep="")
# Get the manually gated labels using a gatingML file
gatingFile <- system.file("extdata","manualGating.xml",
package="FlowSOM")
gateIDs <- c( "B cells"=8,
"ab T cells"=10,
"yd T cells"=15,
"NK cells"=5,
"NKT cells"=6)
cellTypes <- c("B cells","ab T cells","yd T cells",
"NK cells","NKT cells")
gatingResult <- ProcessGatingML(ff_c, gatingFile, gateIDs, cellTypes)
# Plot pies indicating the percentage of cell types present in the nodes
PlotPies(flowSOM_res[[1]],gatingResult$manual)
install.packages("density")
install.packages("densitys")
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
devtools::document()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
devtools::document()
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
version
cyto@version
package.version(cytosee)
package.version("cytosee")
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
cytosee_go()
cytosee_go()
devtools::document()
cytosee_go()
devtools::document()
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
devtools::document()
library(cytosee)
cytosee_go()
cytosee_go()
logTransform()
library(flowCore)
logTransform()
re=SamSPECTRAL::SamSPECTRAL(cyto@fcs.data)
re=SamSPECTRAL::SamSPECTRAL(data.points = cyto@fcs.data,dimensions = c(2:4))
cyto@fcs.data
re=SamSPECTRAL::SamSPECTRAL(data.points = cyto@fcs.data,dimensions = c(2:10),normal.sigma = 200,separation.factor = 0.39)
class(cyto@fcs.data)
re=SamSPECTRAL::SamSPECTRAL(data.points = as.matrix(cyto@fcs.data),dimensions = c(2:10),normal.sigma = 200,separation.factor = 0.39)
unique(cyto@fcs.data)
cyto@fcs.data[which(cyto@fcs.data=="NaN")]
cyto@fcs.data[which(cyto@fcs.data=="NaN"),]
cyto@fcs.data[1,]
cyto@fcs.data[1,]
devtools::document()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
cytosee_go()
cytosee_go()
library(cytosee)
cytosee_go()
cyto@ClusterID
unique(cyto@ClusterID)
cyto@ClusterID[which(is.na(cyto@ClusterID))]="Unknow"
cyto@ClusterID[which(is.na(cyto@ClusterID)),]="Unknow"
cyto@ClusterID
unique(cyto@ClusterID)
library(cytosee)
library(cytosee)
cytosee_go()
cyto@fcs.data
class(cyto@fcs.data)
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
install.packages("HDPGMM")
library(BiocInstaller)
biocLite('HDPGMM')
load(file = "H:/CytoPRO/dataset/graphv.Rdata")
graphv
forceNetwork(Links = graphv$edge_info, Nodes = graphv$node_info, Source = "source",
Target = "target", NodeID = "name",
Group = "cluster", opacity = 1, zoom = FALSE,
bounded = TRUE)
library(networkD3)
forceNetwork(Links = graphv$edge_info, Nodes = graphv$node_info, Source = "source",
Target = "target", NodeID = "name",
Group = "cluster", opacity = 1, zoom = FALSE,
bounded = TRUE)
forceNetwork(Links = graphv$edge_info, Nodes = graphv$node_info, Source = "source",
Target = "target",
Group = "cluster", opacity = 1, zoom = FALSE,
bounded = TRUE)
forceNetwork(Links = graphv$edge_info, Nodes = graphv$node_info, Source = "source",
Target = "target", NodeID = "node",
Group = "cluster", opacity = 1, zoom = FALSE,
bounded = TRUE)
graphv$node_info$node=graphv$node_info$node-1
graphv$node_info
graphv$edge_info$source=graphv$edge_info$source-1
graphv$edge_info$target=graphv$edge_info$target-1
forceNetwork(Links = graphv$edge_info, Nodes = graphv$node_info, Source = "source",
Target = "target", NodeID = "node",
Group = "cluster", opacity = 1, zoom = FALSE,
bounded = TRUE)
library(cytosee)
library(cytosee)
cytosee_go()
cyto@label
data=cyto@fcs.data
library(cytosee)
cytosee_go()
cyto@fcs.data[1]
cyto@fcs.data[2]
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
data=cyto@fcs.data
for(i in length(data[1,])){
data[,i]=data[,i]+0.001
}
sample_n=1000
label=as.matrix(cyto@ClusterID)
smalldata<-data[sample_for_vis(label,sample_n),]
sample_for_vis<-function(label, sample_n = 1000){
total_len = length(label)
if(total_len<=sample_n){
return(1:total_len)
}
else{
label_level = levels(as.factor(label))
av_num = sample_n / length(label_level)
return_list=vector()
for(i in label_level){
ll = which(label==i)
if(length(ll)>500){
return_list = c(return_list,sample(ll,500))
}
else if(length(ll)>100){
return_list = c(return_list,sample(ll,100))
}
else {
return_list = c(return_list,ll)
}
}
return(base::sort(return_list))
}
}
smalldata<-data[sample_for_vis(label,sample_n),
smalldata<-data[sample_for_vis(label,sample_n),]
suppressMessages(vis <-largeVis(scale(t(smalldata)),sgd_batches=0.8))
library(largeVis)
suppressMessages(vis <-largeVis(scale(t(smalldata)),sgd_batches=0.8))
tsne2d <- Rtsne::Rtsne(smalldata,dims=2, pca=tsne_pca, initial_dims=ncol(smalldata))
library(Rsne)
library(Rtsne)
tsne2d <- Rtsne::Rtsne(smalldata,dims=2, pca=tsne_pca, initial_dims=ncol(smalldata))
tsne2d <- Rtsne::Rtsne(smalldata,dims=2, pca=TRUE, initial_dims=ncol(smalldata))
red_dim[["tsne2d"]]<-tsne2d
red_dim <-list()
message("Run pca...")
PCA=princomp(data,cor=TRUE)
red_dim[["PCA"]]<-PCA
red_dim[["tsne2d"]]<-tsne2d
red_dim[["largeVis"]]<-vis
library(cytosee)
cytosee_go()
red_dim
library(cytosee)
cytosee_go()
library(cytosee)
cyto@fcs.data
cytosee_go()
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
cytosee_go()
data=as.data.frame(cyto@dim.red$tsne2d$Y)
smalldata=cyto@fcs.data[cyto@dim.red$smalldata,]
cyto@fcs.data[cyto@dim.red$smalldata,]
cyto@fcs.data[cyto@dim.red$smalldata]
cyto@dim.red$smalldata
library(cytosee)
cytosee_go()
data=as.data.frame(cyto@dim.red$tsne2d$Y)
smalldata=cyto@fcs.data[cyto@dim.red$red_events,]
Expression=smalldata[input$Marker_exp_sca_choice]
Dimension1=data[,1]
Dimension2=data[,2]
set=c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58")
ggplot(data = data,aes(x=Dimension1,y=Dimension2))+geom_point(aes(colour=Expression))+theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
theme(panel.border  = element_blank())+
theme(axis.line = element_line(colour = "black"))+
scale_color_gradientn(colours = set)
Expression=smalldata[1]
Expression
smalldata
cyto@dim.red$red_events
sample_for_vis<-function(label, sample_n = 1000){
total_len = length(label)
if(total_len<=sample_n){
return(1:total_len)
}
else{
label_level = levels(as.factor(label))
av_num = sample_n / length(label_level)
return_list=vector()
for(i in label_level){
ll = which(label==i)
if(length(ll)>500){
return_list = c(return_list,sample(ll,500))
}
else if(length(ll)>100){
return_list = c(return_list,sample(ll,100))
}
else {
return_list = c(return_list,ll)
}
}
return(base::sort(return_list))
}
}
data=cyto@fcs.data[,cyto@channel.use]
label=cyto@ClusterID
sample_for_vis(label)
data
sample_for_vis(as.matrix(label))
cyto@dim.red$red_events
red_dim <-list()
red_dim["red_events"]<-sample_for_vis(label)
red_dim
red_dim["red_events"]<-sample_for_vis(as.matrix(label))
red_dim
red_dim["red_events"]<-as.matrix(sample_for_vis(as.matrix(label)))
red_dim["red_events"]<-as.data.frame(sample_for_vis(as.matrix(label)))
red_dim
library(cytosee)
cytosee_go()
clusters=as.factor(unlist(cyto@ClusterID[cyto@dim.red$red_events]))
cyto@ClusterID
cyto@ClusterID[cyto@dim.red$red_events]
cyto@ClusterID[cyto@dim.red$red_events,]
library(cytosee)
cytosee_go()
library(cytosee)
hello()
hello
hello()
remove.packages("cytosee")
library(cytosee)
library(devtools)
document()
library(cytosee)
library(devtools)
document()
document()
library(cytosee)
document()
document()
library(cytosee)
document()
document()
library(cytosee)
document()
library(cytosee)
document()
cytosee::cytosee_go()
cytosee_go()
library(cytosee)
cytosee_go()
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(devtools)
document()
library(cytosee)
MarkerList="CD8+CD4+CCR7-"
LocCL(MarkerList = MarkerList)
document()
library(cytosee)
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
library(cytosee)
cytosee_go()
